# NFT Most Viewed Inscriptions Dashboard

This Streamlit application fetches and displays the most viewed NFT inscriptions from the last 24 hours from ordinals.com. The app presents detailed data points, various charts, and provides options to download the data as a CSV file and the images as a zip file.

## Features

- **Fetch Data**: Retrieves NFT inscriptions data from a specified URL.
- **Filter and Sort**: Filters inscriptions from the last 24 hours and sorts them by the number of views.
- **Display Data**: Shows the data in a table format and provides detailed data points for each inscription.
- **Charts**: Includes visualizations such as a histogram for views distribution, a bar chart for the top 10 most viewed inscriptions, and a pie chart for category distribution.
- **Download Options**: Allows users to download the data as a CSV file and the images as a zip file.

## Requirements

- Python 3.7+
- Streamlit
- Requests
- Pandas
- Matplotlib

## Installation

1. **Clone the repository**:
    ```sh
    git clone https://github.com/yourusername/nft-inscriptions-dashboard.git
    cd nft-inscriptions-dashboard
    ```

2. **Install the required packages**:
    ```sh
    pip install streamlit requests pandas matplotlib
    ```

3. **Run the app**:
    ```sh
    streamlit run app.py
    ```

## Usage

1. **Open the app**:
    Once the app is running, it will open in your default web browser at `http://localhost:8501`.

2. **Enter the URL**:
    Enter the URL for the NFT inscriptions data (e.g., `https://ordinals.com/api/inscriptions`).

3. **View Data**:
    - The app will fetch and display the most viewed inscriptions from the last 24 hours.
    - Detailed data points, such as titles, views, and creation dates, will be shown.
    - Charts for views distribution, top 10 most viewed inscriptions, and category distribution will be presented.

4. **Download Data**:
    - You can download the data as a CSV file by clicking on the "Download CSV File" link.
    - You can download all the images as a zip file by clicking on the "Download Images Zip" link.

## Code Overview

### `app.py`

```python
import streamlit as st
import requests
import pandas as pd
from datetime import datetime, timedelta
from io import BytesIO
import zipfile
import base64
import matplotlib.pyplot as plt

def fetch_inscriptions(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Failed to retrieve data. Status code: {response.status_code}")
        return []

def filter_and_sort_inscriptions(inscriptions):
    last_24_hours = datetime.now() - timedelta(hours=24)
    filtered_inscriptions = [
        ins for ins in inscriptions 
        if datetime.fromisoformat(ins['created_at']) > last_24_hours
    ]
    sorted_inscriptions = sorted(filtered_inscriptions, key=lambda x: x['views'], reverse=True)
    return sorted_inscriptions

def get_table_download_link(df):
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="inscriptions.csv">Download CSV File</a>'
    return href

def get_zip_download_link(images):
    zip_buffer = BytesIO()
    with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zip_file:
        for i, (img_url, img) in enumerate(images):
            img_data = requests.get(img_url).content
            img_name = f"image_{i}.png"
            zip_file.writestr(img_name, img_data)
    
    zip_buffer.seek(0)
    b64 = base64.b64encode(zip_buffer.read()).decode()
    href = f'<a href="data:application/zip;base64,{b64}" download="images.zip">Download Images Zip</a>'
    return href

st.title('Most Viewed Inscriptions in the Last 24 Hours')

st.markdown(
    """
    <script>
    document.querySelectorAll('input[type="text"]')[0].setAttribute('autocomplete', 'url');
    </script>
    """,
    unsafe_allow_html=True
)

url = st.text_input('Enter URL for inscriptions data', value='https://ordinals.com/api/inscriptions', autocomplete='url')
if url:
    inscriptions = fetch_inscriptions(url)
    if inscriptions:
        most_viewed_inscriptions = filter_and_sort_inscriptions(inscriptions)
        
        if most_viewed_inscriptions:
            st.write(f"Found {len(most_viewed_inscriptions)} inscriptions in the last 24 hours.")
            
            df = pd.DataFrame(most_viewed_inscriptions)
            
            st.dataframe(df)
            
            st.markdown(get_table_download_link(df), unsafe_allow_html=True)
            
            st.subheader("Views Distribution")
            fig, ax = plt.subplots()
            df['views'].plot(kind='hist', bins=20, ax=ax)
            ax.set_title("Views Distribution")
            st.pyplot(fig)

            st.subheader("Top 10 Most Viewed Inscriptions")
            top_10_df = df.head(10)
            fig, ax = plt.subplots()
            top_10_df.plot(kind='bar', x='title', y='views', ax=ax)
            ax.set_title("Top 10 Most Viewed Inscriptions")
            ax.set_xlabel("Title")
            ax.set_ylabel("Views")
            st.pyplot(fig)
            
            st.subheader("Category Distribution")
            if 'category' in df.columns:
                category_counts = df['category'].value_counts()
                fig, ax = plt.subplots()
                category_counts.plot(kind='pie', ax=ax, autopct='%1.1f%%', startangle=90)
                ax.set_title("Category Distribution")
                ax.set_ylabel('')
                st.pyplot(fig)
            else:
                st.write("No category data available.")
            
            images = [(ins['image_url'], ins['title']) for ins in most_viewed_inscriptions]
            st.markdown(get_zip_download_link(images), unsafe_allow_html=True)
            
            for ins in most_viewed_inscriptions:
                st.write(f"**Title:** {ins['title']}")
                st.write(f"**Views:** {ins['views']}")
                st.write(f"**Created At:** {ins['created_at']}")
                st.image(ins['image_url'], caption=ins['title'])
                st.write("---")
        else:
            st.write("No inscriptions found in the last 24 hours.")
    else:
        st.write("No data available.")
```

## License

This project is licensed under the MIT License. See the LICENSE file for more details.

---

This README provides an overview of the application's features, requirements, installation steps, usage instructions, and a code overview to help users understand and set up the application.
